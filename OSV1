asdfkjlasdkflj


import "io"
import "basic"

// Displays user input on screen.
let echo(input) be
{
  // TODO: Real echo gets rid of quotation marks.
  out("%s \n", input);
}

let time() be
{
  let v = vec(7);
  let t = seconds();

  datetime(t, v);
  out("month: %d \n", v ! 1);
  out("day: %d \n", v ! 2);
  out("year: %d \n", v ! 0);
  // freevec(v);
}

// Exits the prompt.
let exit() be {
  finish;
}

// Compares strings. Returns 1 if equal, 0 if not.
let strcmp(a, b) be {

  let i = 0;

   while true do {
     test byte i of a <> byte i of b then
       resultis 0

     // If at the end of string, then the strings are equal.
     else test byte i of a = 0  /\ byte i of b = 0 then
       resultis 1

     else
       i +:= 1;
   }

   resultis 0;
}

let get_string() be
{ let ch = 0;
  let str = "";
  let i = 0;

  while true do {

    ch := inch();
    // out ("%d: %08x \n", i, str!0);
    test ch = ' ' \/ ch = '\n' then
    {
      byte i of str := 0;
      resultis str;
    }

    else
    {
      byte i of str := ch;
      i +:= 1
    }
  }

  resultis str;
}
// Gets the users input and places the command + additional arguments in
// input_arr array. Right now this only looks for one argument.
let get_usr_input(input_arr) be
{
  let i = 0;
  let ch, cmd, arg = "";

  // fill the cmd
  while true do {

    ch := inch();
    // out ("%d: %08x \n", i, ch);
    test ch = ' ' then
    {
      byte i of cmd := 0;
      break;
    }

    else test ch = '\n' then
    { input_arr ! 1 := "";
      byte i of cmd := 0;
      input_arr ! 0 := cmd;

      resultis 0
    }
    else
    {
      byte i of cmd := ch;
      i +:= 1
    }
  }

  // out("cmdr: %s \n", input_arr ! 0);
  input_arr ! 0 := cmd;

  i := 0;

  // fill the argument
  while true do {
    ch := inch();

    if ch = '\n' \/ ch = ' ' \/ ch = 0 then
    {
      byte i of arg := 0;
      break;
    }

    byte i of arg := ch;
    i +:= 1;
  }

  input_arr ! 1 := arg;
}

// This could be used to make the input system non case sensitive.
let to_upper(s) be {
  let end = strlen(s);
  let i = 0;
  let ch = 0;
  while i < end do {
    out ("%d: %d\n", i, byte i of s);
    if byte i of s >= 97 then
      if byte i of s <= 122 then
        byte i of s -:= 32;
    i +:= 1;
  }

  out("big: %s \n", s);
}

// Get user input and process it.
let process_cmd() be {
  let cmd, arg, input = "";
  let input_arr = vec(2);  // arr ! 0 = cmd, arr ! 1 = arg;

  while true do {
    out("$ ");
    // input := get_usr_input(input_arr);   // Get raw input from user.

    arg := get_string();
    out("ig: %s \n", arg);

    cmd := get_string();
    out("ig: %s \n", cmd);

    test strcmp(cmd, "echo") then
      echo(arg)
    else test strcmp(cmd, "exit") then
      exit()
    else test strcmp(cmd, "time") then
      time()
    else test strcmp(cmd, "") then
      loop
    else
      out("%s: Command not found. \n", cmd);
    input_arr ! 0 := 0;
    input_arr ! 1 := 0;

  }
}

let start() be
{
  // let heap = vec(10000);
  // init(heap, 10000);
  process_cmd();
}


