import "io"
import "basic"
import "string_stuff"

// makes change to VM easier.
manifest
{ ptn_bits = selector 10 : 22,  // page table = 10 bits
  pn_bits = selector 11 : 11,   // page = 11 bits
  offset_bits = selector 11 : 0,  // offset = 11
  tok_size = 12,
  in_size = 25
}

manifest
{ iv_none = 0,        iv_memory = 1,      iv_pagefault = 2,   iv_unimpop = 3,
  iv_halt = 4,        iv_divzero = 5,     iv_unwrop = 6,      iv_timer = 7,
  iv_privop = 8,      iv_keybd = 9,       iv_badcall = 10,    iv_pagepriv = 11,
  iv_debug = 12,      iv_intrfault = 13 }

// Displays user input on screen.
let echo(input) be 
{ 
  // TODO: Real echo gets rid of quotation marks.
  out("%s \n", input);
}

let time() be 
{
  let v = vec(7);
  let t = seconds();

  datetime(t, v);
  out("month: %d \n", v ! 1);
  out("day: %d \n", v ! 2);
  out("year: %d \n", v ! 0);
}

// Exits the prompt.
let exit() be {
  finish
}

let getPhysPageNum() be { 
  let new_page = infopage ! ifp_freelistptr; // Virtual Addr
  out ("new page: %x \n", new_page);
  infopage ! ifp_freelistnum -:= 1;  // decrement number of freepages
  out ("pages left: %d \n", infopage ! ifp_freelistnum);
  infopage ! ifp_freelistptr +:= 1;  // increment (not sure that's perfect)
  
  resultis ! new_page  // returns va of new page
}

let print_page(addr) be {
  let j = 0;
  while j < 0x800 do {
    out("pgdir_va ! %x: %x \n", j, addr ! j);
    j +:= 1;
  }
 
} 

let run(name) be { 
  let n, avail, pos, addr, page, init_addr;
  let pt_userCode, pt_userStack, pt_ppn; 
  let userCode_va, userStack_va;
  let ptn, pn, pt_physaddr, ppn;

  // Load in the file you wanna run.
  let r = devctl(DC_TAPE_LOAD, 1, name, 'R');

  if r < 0 then { 
    out("error %d for loading tape '%s'\n", r, name);
    finish 
  }

  //userStack_va := pgdir_va + 0x1FF;
  // userCode_va := pgdir_va;
  //out("userCode_va: %x \n", userCode_va);
  //out("userStack_va: %x \n", userStack_va);

  // Set up the user code page table
  ppn := getPhysPageNum();
  out("ppn: %x \n", ppn);
  out("ppn << 11: %x \n", ppn << 11);
  pgdir_va ! 0 := (ppn << 11) bitor 1;
  out ("USER CODE PT CREATED \n \n");
  out("pgdir ! 0: %x \n", pgdir_va ! 0);

  // Set up the user stack page table
  ppn := getPhysPageNum();
  out("ppn: %x \n", ppn);
  pgdir_va ! 0x1FF := (ppn << 11) bitor 1;
  out ("USER STACK PT CREATED \n \n");

  // print_page(pgdir_va ! 0);
  
  // Create page to write to. 
  ppn := getPhysPageNum();
  addr := (ppn << 11);
    
  out("ppn: %x \n", ppn);

  // let ptn = ptn_bits from userCode_va ! 0;          
  // let pn = pn_bits from userCode_va ! 0;          
  // let pt_physaddr = pgdir_va ! ptn >> 11;
  // out("page table is phys page %d\n", pt_physaddr);

  ptspec_va ! spec_p1e := (pgdir_va ! 0) bitor 1;
  out("p1_va: %x \n", p1_va ! 0 );

  p1_va ! 0 := addr bitor 1;
  out("p1_va: %x \n", p1_va ! 0 );
  out("INITIAL ADDR TO READ TO: %x\n", addr);
  debug 1;
  
  //! addr := 1;


  n := 0;         // bytes to be read.
  avail := 16;    // number of blocks available in a page.
  pos := 1;       // top of the code page table
  
  // Load the program into memory
  while true do
  { 
     out("bp 3\n");
     r := devctl(DC_TAPE_READ, 1, addr);
     if r < 0 then
     { out("error %d while reading tape '%s'\n", r, name);
       finish 
     }

     n +:= r;
     avail -:= 1;
     addr +:= 128;
  
     out("Address: %x\n", addr);
     out("Total bytes read so far: %d\n", n);
     out("Avail: %d\n", avail);
  
     if r < 128 then break;
  
     if avail = 0 then    // need a new page
     { 
       out("Getting a new page to read in code\n");
//       (infopage ! ifp_freelistptr) +:= 0x1;

       ppn := getPhysPageNum();
       addr := (ppn << 11);
       //ptn := ptn_bits from addr;
       //pn := pn_bits from addr;
       //pt_physaddr := pgdir_va ! ptn >> 11;
       ptspec_va ! spec_p1e := ! userCode_va;
       p1_va ! pos := addr bitor 1;     
       
       pos +:= 1;
       avail := 16 
     } 
  }

  out("%d bytes, %d pages of '%s' loaded\n", n, 2047-pos, name);
}

// Get user input and process it.
let process_cmd() be {

  let tok_size = in_size;
  let cmd = vec tok_size;
  let arg = vec tok_size;

  let i = 0;
  let in_buff = vec in_size; 

  while true do {
    out("$ ");   
    
    getline(in_buff);
    // out ("line: %s \n", in_buff);
    parse(in_buff, cmd, arg);  

    test strcmp(cmd , "echo") then 
      echo(arg)
    else test strcmp(cmd, "exit") then 
      exit()
    else test strcmp(cmd, "time") then 
      time()
    else test strcmp(cmd, "run") then
      run(arg)
    else test strcmp(cmd, "") then 
      loop
    else
      out("%s: Command not found. \n", cmd);  
    
    while i < 12 do { 
      byte i of cmd := 0;
      byte i of arg := 0;
      byte i of in_buff := 0;
      i +:= 1;
    }
    
    i := 0;
  }  
}

// Handles page faults.
let ihandle_pf(intcode, address, info, pc) be 
{ 
  let ptn = ptn_bits from address,  // page table number
       pn = pn_bits from address,   // page number
      off = offset_bits from address;

  let pt_physaddr = pgdir_va ! ptn >> 11;  // page table phys add

  out("Page Fault for %08x: PT:%d, PN:%d, OFF:%d\n", address, ptn, pn, off);
  out("PC was %08x = %d\n", pc, pc); 
  out("relevant page table is phys page %d\n", pt_physaddr);

  ptspec_va ! spec_p1e := (pt_physaddr << 11) bitor 1;
  p1_va ! pn := (13 << 11) bitor 1;    // p1_va is a handy page

  // ireturn 
  finish;
}

// Sets up interrupt handling.
let setup_ih() be { 
  intvec_va ! iv_pagefault := ihandle_pf;

  // This ensures that interrupts are not ignored. 
  assembly
  { getsr r1, $flags
    cbit      $ip
    setsr r1, $flags 
  }
}

let start() be 
{  
  
  // uploading
  //setup_ih();
  run("simple.exe");
  // process_cmd();
}
