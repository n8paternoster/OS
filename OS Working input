import "io"
import "basic"
 
// Displays user input on screen.
let echo(input) be 
{ 
  // TODO: Real echo gets rid of quotation marks.
  out("%s \n", input);
}

let time() be 
{
  let v = vec(7);
  let t = seconds();

  datetime(t, v);
  out("month: %d \n", v ! 1);
  out("day: %d \n", v ! 2);
  out("year: %d \n", v ! 0);
  // freevec(v);
}

// Exits the prompt.
let exit() be {
  finish;
}

// Compares strings. Returns 1 if equal, 0 if not.
let strcmp(a, b) be { 

  let i = 0; 

   while true do { 
     test byte i of a <> byte i of b then    
       resultis 0

     // If at the end of string, then the strings are equal.     
     else test byte i of a = 0  /\ byte i of b = 0 then  
       resultis 1

     else
       i +:= 1;
   }

   resultis 0;
}

let parse(in_buff, cmd, arg) be
{ 
  let ch = "";
  let t_cmd = vec 4;
  let j = 0;
  let i = 0;
  let t_arg = vec 4;

  // out("ip2: %s \n", in_buff);
    
  while true do 
  {
    ch := byte i of in_buff;
    //out("%d: %08x \n", i, t_cmd ! 0 ! 0);

    test ch = ' ' then
    {
      byte i of t_cmd ! 0 := 0;
      i +:= 1;     
      break
    }

    else test ch = '\n' \/ ch = 0 then
    {
      byte i of t_cmd ! 0 := 0;
      t_arg ! 0 := "";
      break;
    }

    else
    {
      byte i of t_cmd ! 0 := ch;
      i +:= 1
    }
  }

  while true do {

    ch := byte i of in_buff;
    // out("%d: %08x \n", i, t_cmd ! 0 ! 0);
   
    test ch = ' ' then
    {
      byte j of t_arg ! 0 := 0;
      break
    }

    else test ch = 0 then
    {
      byte j of t_arg ! 0 := 0;
      break
    }

    else
    {      
      byte j of (t_arg ! 0) := ch;
      i +:= 1;
      j +:= 1
    }
  }
 
  // out("ip t_arg: %s \n", t_arg ! 0);
  // out("ip t_cmd: %s \n", t_cmd ! 0);
  cmd ! 0 := t_cmd ! 0;
  arg ! 0 := t_arg ! 0;
}

let getline(in_buff) be
{ 
  let ch = 0;
  let local = vec(6);
  let i = 0;
    
  // out("ig %08x \n", in_buff);
  while true do {

    ch := inch();
    // out ("%d: %08x \n", i, local ! 0 ! 0);
    test ch = '\n' then
    {
      byte i of local ! 0 := 0;
      // out("iget loc: %s \n", local ! 0);
      break;
    }
  
    else
    {
      byte i of (local ! 0) := ch;
      i +:= 1
    }
  }
  in_buff ! 0 := local ! 0;
}

// Get user input and process it.
let process_cmd() be {
 
  let cmd, arg = vec 4;
  let t = 0;
  let in_buff = vec 6; 
  while true do {
    out("$ ");    
    getline(in_buff);
    // out("line: %s \n", in_buff ! 0);
    parse(in_buff ! 0, cmd, arg);  

    // out("cmd: %s \n", cmd ! 0);
    // out("arg: %s \n", arg ! 0);    
    
    test strcmp(cmd ! 0, "echo") then 
      echo(arg ! 0)
    else test strcmp(cmd ! 0, "exit") then 
      exit()
    else test strcmp(cmd ! 0, "time") then 
      time()
    else test strcmp(cmd ! 0, "") then 
      loop
    else
      out("%s: Command not found. \n", cmd);    
  }  
}

let start() be 
{
  // let heap = vec(10000);
  // init(heap, 10000);
  process_cmd();
}
